The ``0-add_integer`` module
============================
Using ``add_integer``
----------------------------

This is the testing mode for python using doctest
``add_integer`` from the ``0-add_integer`` module
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3
	>>> add_integer(100, -2)
	98
	>>> add_integer(2)
	100
	>>> add_integer(100.3, -2)
	98
	>>> add_integer(2.5, 0.5)
	2
	>>> add_integer(5.6)
	103

Non-numbers
============
``add_integer()`` expects both arguments to be an ints or floats

>>> add_integer(4, "School")
TypeError: b must be an integer
>>> add_integer("Man", 3)
TypeError: a must be an integer
>>> add_integer(3, float('inf'))
File "./tests/0-add_integer.txt", line 30, in 0-add_integer.txt
Failed example:
    	add_integer(3, float('inf'))
Exception raised:
    	Traceback (most recent call last):
      		File "/usr/lib/python3.8/doctest.py", line 1336, in __run
        	        exec(compile(example.source, filename, "single",
      		File "<doctest 0-add_integer.txt[9]>", line 1, in <module>
        	        add_integer(3, float('inf'))
      		File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 13, in add_integer
        	        return (int(a) + int(b))
    	OverflowError: cannot convert float infinity to integer

